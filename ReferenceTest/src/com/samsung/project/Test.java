package com.samsung.project;

public class Test {
	// 접근 제어자
	// public, protected, default(package), private
	// public(접근제한 없음) : 클래스, 필드(멤버변수), 생성자, 메소드
	// protected(자식 클래스가 아닌 다른 패키지에 있는 클래스 접근 불가) : 필드, 생성자, 메소드
	// default(package, 다른 패키지에 있는 클래스 접근 불가) : 클래스, 필드, 생성자, 메소드
	// private(모든 외부 클래스 접근 불가) : 필드, 생성자, 메소드
	// ----------------------------------------------
	// 클래스, 생성자, 메소드 => 주로 public
	// 필드(멤버변수) => private
	
	/* class Variables{
	*	private int iv : // 인스턴스 변수, 속성, 프로퍼티, 멤버변수, 필드
	*	static int cv : // 클래스 변수, static 변수
	*	
	*	public Variables(int iv) { // 지역변수	
	*
	*	}
	*
	*	void method(int a) { // 지역변수
	*		int sum = 0;
	*	}
	* }
	*/
	
	// => 생성 시기
	// 클래스 변수 : 클래스가 메모리에 올라갈 때
	// 인스턴스 변수 : 객체 생성될 때
	// 지역 변수 : 변수 선언문이 수행될 때
	
	// 상속 => extends
	//		  부모클래스 => 자식클래스
	//		  단일 상속
	
	// 오버라이딩(overriding) : 조상 클래스로부터 상속받은 메소드의 내용을 변경
	// 조건
	// 1. 이름이 같아야 한다.
	// 2. 매개변수가 같아야 한다.
	// 3. 반환 타입이 같아야 한다.
	
	// 오버로딩 vs 오버라이딩
	// 오버로딩 : 새로운 메소드 정의 (같은 이름으로 매개변수만 다르게)
	// 오버라이딩 : 상속받은 메소드의 내용을 변경하는 것
	
	
	
	
	
	
}
